#include "mbed.h"
// Creates an event bound to the specified event queue
EventQueue queue;
void handler(int count);
Event<void(int)> event1(&queue, handler);
Event<void(int)> event2(&queue, handler);
void handler(int count)
{
unsigned time_ms = equeue_tick();
printf("Timestamp = %d Event = %d \n", time_ms, count);
return;
}

void post_events(void)
{
// Events can be posted multiple times and enqueue gracefully until
// the dispatch function is called. Each event will be processed
// subject to any delay and period specified. Each time an event has
// been dispatched it will be re-queued ready for the next dispatch
// period.
event1.post(1); // Event1 with a value of 1
event1.post(2); // Event1 with a value of 2
event1.post(3); // Event1 with a value of 3
// Cancel the last event posted ie Event1 with a value of 3
event1.cancel();
event1.post(4); // Event1 with a value of 4
event2.post(5); // Event2 with a value of 5
}









#include "mbed.h"
DigitalOut led1(LED1);
InterruptIn sw(USER_BUTTON);
EventQueue queue(32 * EVENTS_EVENT_SIZE);
Thread t;
void rise_handler(void)
{
// Toggle LED
led1 = !led1;
osThreadId_t fall_t_id = ThisThread::get_id();
queue.call(printf, "rise_handler in context %p\n", fall_t_id);
}

void fall_handler(void)
{
// Toggle LED
led1 = !led1;
printf("fall_handler in context %p\n", ThisThread::get_id());
}
int main()
{
// Start the event queue
t.start(callback(&queue, &EventQueue::dispatch_forever));
printf("Starting in context %p\r\n", ThisThread::get_id());
// The 'rise' handler will execute in IRQ context
sw.rise(rise_handler);
// The 'fall' handler will execute in the context of thread 't'
sw.fall(queue.event(fall_handler));
}
